/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { FxBoxBox, FxBoxBoxInterface } from "../box";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_fxCard",
        type: "address",
      },
      {
        internalType: "address",
        name: "_currencyToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_supply",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "buyBox",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "currencyToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fxCard",
    outputs: [
      {
        internalType: "contract ICard",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
    ],
    name: "setRecipient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "supply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b1461012157806391b7f5ed1461013f578063a035b1fe1461015b578063e41e591d14610179578063f2fde38b146101975761009e565b8063047fc9aa146100a35780633bbed4a0146100c15780633e049343146100dd5780636b2fa374146100f9578063715018a614610117575b600080fd5b6100ab6101b3565b6040516100b89190610a4d565b60405180910390f35b6100db60048036038101906100d69190610acb565b6101b9565b005b6100f760048036038101906100f29190610b24565b610205565b005b610101610451565b60405161010e9190610bb0565b60405180910390f35b61011f610477565b005b61012961048b565b6040516101369190610bda565b60405180910390f35b61015960048036038101906101549190610b24565b6104b4565b005b6101636104c6565b6040516101709190610a4d565b60405180910390f35b6101816104cc565b60405161018e9190610c16565b60405180910390f35b6101b160048036038101906101ac9190610acb565b6104f2565b005b60065481565b6101c1610575565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61020d6105f3565b60008111610250576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024790610c8e565b60405180910390fd5b806006541015610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028c90610cfa565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fa90610d66565b60405180910390fd5b61038133600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600354846103389190610db5565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610642909392919063ffffffff16565b60005b8181101561042c57600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340d097c3336040518263ffffffff1660e01b81526004016103e79190610bda565b600060405180830381600087803b15801561040157600080fd5b505af1158015610415573d6000803e3d6000fd5b50505050808061042490610df7565b915050610384565b50806006600082825461043f9190610e3f565b9250508190555061044e6106cb565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61047f610575565b61048960006106d4565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104bc610575565b8060038190555050565b60035481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104fa610575565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610569576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056090610ee5565b60405180910390fd5b610572816106d4565b50565b61057d610798565b73ffffffffffffffffffffffffffffffffffffffff1661059b61048b565b73ffffffffffffffffffffffffffffffffffffffff16146105f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e890610f51565b60405180910390fd5b565b600260015403610638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062f90610fbd565b60405180910390fd5b6002600181905550565b6106c5846323b872dd60e01b85858560405160240161066393929190610fdd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506107a0565b50505050565b60018081905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000610802826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166108679092919063ffffffff16565b90506000815111156108625780806020019051810190610822919061104c565b610861576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610858906110eb565b60405180910390fd5b5b505050565b6060610876848460008561087f565b90509392505050565b6060824710156108c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bb9061117d565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516108ed919061120e565b60006040518083038185875af1925050503d806000811461092a576040519150601f19603f3d011682016040523d82523d6000602084013e61092f565b606091505b50915091506109408783838761094c565b92505050949350505050565b606083156109ae5760008351036109a657610966856109c1565b6109a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099c90611271565b60405180910390fd5b5b8290506109b9565b6109b883836109e4565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156109f75781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2b91906112e6565b60405180910390fd5b6000819050919050565b610a4781610a34565b82525050565b6000602082019050610a626000830184610a3e565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a9882610a6d565b9050919050565b610aa881610a8d565b8114610ab357600080fd5b50565b600081359050610ac581610a9f565b92915050565b600060208284031215610ae157610ae0610a68565b5b6000610aef84828501610ab6565b91505092915050565b610b0181610a34565b8114610b0c57600080fd5b50565b600081359050610b1e81610af8565b92915050565b600060208284031215610b3a57610b39610a68565b5b6000610b4884828501610b0f565b91505092915050565b6000819050919050565b6000610b76610b71610b6c84610a6d565b610b51565b610a6d565b9050919050565b6000610b8882610b5b565b9050919050565b6000610b9a82610b7d565b9050919050565b610baa81610b8f565b82525050565b6000602082019050610bc56000830184610ba1565b92915050565b610bd481610a8d565b82525050565b6000602082019050610bef6000830184610bcb565b92915050565b6000610c0082610b7d565b9050919050565b610c1081610bf5565b82525050565b6000602082019050610c2b6000830184610c07565b92915050565b600082825260208201905092915050565b7f416d6f756e742073686f756c642062652067726561746572207468616e203000600082015250565b6000610c78601f83610c31565b9150610c8382610c42565b602082019050919050565b60006020820190508181036000830152610ca781610c6b565b9050919050565b7f496e73756666696369656e7420737570706c7900000000000000000000000000600082015250565b6000610ce4601383610c31565b9150610cef82610cae565b602082019050919050565b60006020820190508181036000830152610d1381610cd7565b9050919050565b7f436f6e74726163747320617265206e6f7420616c6c6f77656400000000000000600082015250565b6000610d50601983610c31565b9150610d5b82610d1a565b602082019050919050565b60006020820190508181036000830152610d7f81610d43565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dc082610a34565b9150610dcb83610a34565b9250828202610dd981610a34565b91508282048414831517610df057610def610d86565b5b5092915050565b6000610e0282610a34565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e3457610e33610d86565b5b600182019050919050565b6000610e4a82610a34565b9150610e5583610a34565b9250828203905081811115610e6d57610e6c610d86565b5b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610ecf602683610c31565b9150610eda82610e73565b604082019050919050565b60006020820190508181036000830152610efe81610ec2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610f3b602083610c31565b9150610f4682610f05565b602082019050919050565b60006020820190508181036000830152610f6a81610f2e565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610fa7601f83610c31565b9150610fb282610f71565b602082019050919050565b60006020820190508181036000830152610fd681610f9a565b9050919050565b6000606082019050610ff26000830186610bcb565b610fff6020830185610bcb565b61100c6040830184610a3e565b949350505050565b60008115159050919050565b61102981611014565b811461103457600080fd5b50565b60008151905061104681611020565b92915050565b60006020828403121561106257611061610a68565b5b600061107084828501611037565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006110d5602a83610c31565b91506110e082611079565b604082019050919050565b60006020820190508181036000830152611104816110c8565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611167602683610c31565b91506111728261110b565b604082019050919050565b600060208201905081810360008301526111968161115a565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156111d15780820151818401526020810190506111b6565b60008484015250505050565b60006111e88261119d565b6111f281856111a8565b93506112028185602086016111b3565b80840191505092915050565b600061121a82846111dd565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061125b601d83610c31565b915061126682611225565b602082019050919050565b6000602082019050818103600083015261128a8161124e565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b60006112b882611291565b6112c28185610c31565b93506112d28185602086016111b3565b6112db8161129c565b840191505092915050565b6000602082019050818103600083015261130081846112ad565b90509291505056fea2646970667358221220d7f7e1ff47002a3e4f1db5bba09ee9751b854157a7158055b08452c760a8972664736f6c63430008110033";

type FxBoxBoxConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FxBoxBoxConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FxBoxBox__factory extends ContractFactory {
  constructor(...args: FxBoxBoxConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FxBoxBox> {
    return super.deploy(overrides || {}) as Promise<FxBoxBox>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FxBoxBox {
    return super.attach(address) as FxBoxBox;
  }
  connect(signer: Signer): FxBoxBox__factory {
    return super.connect(signer) as FxBoxBox__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FxBoxBoxInterface {
    return new utils.Interface(_abi) as FxBoxBoxInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FxBoxBox {
    return new Contract(address, _abi, signerOrProvider) as FxBoxBox;
  }
}
