/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
  } from "ethers";
  import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
  import { Listener, Provider } from "@ethersproject/providers";
  import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
  
  export interface FxBoxInterface extends utils.Interface {
    functions: {
      "DEFAULT_ADMIN_ROLE()": FunctionFragment;
      "MINTER_ROLE()": FunctionFragment;
      "__FxBox_init(string,string,string)": FunctionFragment;
      "allowTransfer()": FunctionFragment;
      "approve(address,uint256)": FunctionFragment;
      "balanceOf(address)": FunctionFragment;
      "banNft(uint256)": FunctionFragment;
      "baseURI()": FunctionFragment;
      "blackList(uint256)": FunctionFragment;
      "checkExistsToken(uint256)": FunctionFragment;
      "getApproved(uint256)": FunctionFragment;
      "getRoleAdmin(bytes32)": FunctionFragment;
      "grantMinterRole(address)": FunctionFragment;
      "grantRole(bytes32,address)": FunctionFragment;
      "hasRole(bytes32,address)": FunctionFragment;
      "isApprovedForAll(address,address)": FunctionFragment;
      "mintNft(address,uint256)": FunctionFragment;
      "name()": FunctionFragment;
      "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
      "owner()": FunctionFragment;
      "ownerOf(uint256)": FunctionFragment;
      "renounceOwnership()": FunctionFragment;
      "renounceRole(bytes32,address)": FunctionFragment;
      "revokeMinterRole(address)": FunctionFragment;
      "revokeRole(bytes32,address)": FunctionFragment;
      "safeTransferFrom(address,address,uint256)": FunctionFragment;
      "setAllowTransfer(bool)": FunctionFragment;
      "setApprovalForAll(address,bool)": FunctionFragment;
      "setBaseURI(string)": FunctionFragment;
      "supportsInterface(bytes4)": FunctionFragment;
      "symbol()": FunctionFragment;
      "tokenByIndex(uint256)": FunctionFragment;
      "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
      "tokenURI(uint256)": FunctionFragment;
      "totalSupply()": FunctionFragment;
      "transferFrom(address,address,uint256)": FunctionFragment;
      "transferOwnership(address)": FunctionFragment;
      "unbanNft(uint256)": FunctionFragment;
    };
  
    encodeFunctionData(
      functionFragment: "DEFAULT_ADMIN_ROLE",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "MINTER_ROLE",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "__FxBox_init",
      values: [string, string, string]
    ): string;
    encodeFunctionData(
      functionFragment: "allowTransfer",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "approve",
      values: [string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
    encodeFunctionData(
      functionFragment: "banNft",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "blackList",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "checkExistsToken",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "getApproved",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "getRoleAdmin",
      values: [BytesLike]
    ): string;
    encodeFunctionData(
      functionFragment: "grantMinterRole",
      values: [string]
    ): string;
    encodeFunctionData(
      functionFragment: "grantRole",
      values: [BytesLike, string]
    ): string;
    encodeFunctionData(
      functionFragment: "hasRole",
      values: [BytesLike, string]
    ): string;
    encodeFunctionData(
      functionFragment: "isApprovedForAll",
      values: [string, string]
    ): string;
    encodeFunctionData(
      functionFragment: "mintNft",
      values: [string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "onERC721Received",
      values: [string, string, BigNumberish, BytesLike]
    ): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "ownerOf",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "renounceOwnership",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "renounceRole",
      values: [BytesLike, string]
    ): string;
    encodeFunctionData(
      functionFragment: "revokeMinterRole",
      values: [string]
    ): string;
    encodeFunctionData(
      functionFragment: "revokeRole",
      values: [BytesLike, string]
    ): string;
    encodeFunctionData(
      functionFragment: "safeTransferFrom",
      values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "setAllowTransfer",
      values: [boolean]
    ): string;
    encodeFunctionData(
      functionFragment: "setApprovalForAll",
      values: [string, boolean]
    ): string;
    encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
    encodeFunctionData(
      functionFragment: "supportsInterface",
      values: [BytesLike]
    ): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "tokenByIndex",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "tokenOfOwnerByIndex",
      values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "tokenURI",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "totalSupply",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "transferFrom",
      values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "transferOwnership",
      values: [string]
    ): string;
    encodeFunctionData(
      functionFragment: "unbanNft",
      values: [BigNumberish]
    ): string;
  
    decodeFunctionResult(
      functionFragment: "DEFAULT_ADMIN_ROLE",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "MINTER_ROLE",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "__FxBox_init",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "allowTransfer",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "banNft", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "blackList", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "checkExistsToken",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "getApproved",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "getRoleAdmin",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "grantMinterRole",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "isApprovedForAll",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "mintNft", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "onERC721Received",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "renounceOwnership",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "renounceRole",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "revokeMinterRole",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "safeTransferFrom",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "setAllowTransfer",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "setApprovalForAll",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "supportsInterface",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "tokenByIndex",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "tokenOfOwnerByIndex",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "totalSupply",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferFrom",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferOwnership",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "unbanNft", data: BytesLike): Result;
  
    events: {
      "Approval(address,address,uint256)": EventFragment;
      "ApprovalForAll(address,address,bool)": EventFragment;
      "BanNft(uint256)": EventFragment;
      "NFTCreated(string,uint256,address)": EventFragment;
      "OwnershipTransferred(address,address)": EventFragment;
      "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
      "RoleGranted(bytes32,address,address)": EventFragment;
      "RoleRevoked(bytes32,address,address)": EventFragment;
      "Transfer(address,address,uint256)": EventFragment;
      "UnbanNft(uint256)": EventFragment;
    };
  
    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BanNft"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NFTCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UnbanNft"): EventFragment;
  }
  
  export type ApprovalEvent = TypedEvent<
    [string, string, BigNumber],
    { owner: string; approved: string; tokenId: BigNumber }
  >;
  
  export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;
  
  export type ApprovalForAllEvent = TypedEvent<
    [string, string, boolean],
    { owner: string; operator: string; approved: boolean }
  >;
  
  export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;
  
  export type BanNftEvent = TypedEvent<[BigNumber], { id: BigNumber }>;
  
  export type BanNftEventFilter = TypedEventFilter<BanNftEvent>;
  
  export type NFTCreatedEvent = TypedEvent<
    [string, BigNumber, string],
    { baseURI: string; id: BigNumber; minter: string }
  >;
  
  export type NFTCreatedEventFilter = TypedEventFilter<NFTCreatedEvent>;
  
  export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    { previousOwner: string; newOwner: string }
  >;
  
  export type OwnershipTransferredEventFilter =
    TypedEventFilter<OwnershipTransferredEvent>;
  
  export type RoleAdminChangedEvent = TypedEvent<
    [string, string, string],
    { role: string; previousAdminRole: string; newAdminRole: string }
  >;
  
  export type RoleAdminChangedEventFilter =
    TypedEventFilter<RoleAdminChangedEvent>;
  
  export type RoleGrantedEvent = TypedEvent<
    [string, string, string],
    { role: string; account: string; sender: string }
  >;
  
  export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;
  
  export type RoleRevokedEvent = TypedEvent<
    [string, string, string],
    { role: string; account: string; sender: string }
  >;
  
  export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;
  
  export type TransferEvent = TypedEvent<
    [string, string, BigNumber],
    { from: string; to: string; tokenId: BigNumber }
  >;
  
  export type TransferEventFilter = TypedEventFilter<TransferEvent>;
  
  export type UnbanNftEvent = TypedEvent<[BigNumber], { id: BigNumber }>;
  
  export type UnbanNftEventFilter = TypedEventFilter<UnbanNftEvent>;
  
  export interface FxBox extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
  
    interface: FxBoxInterface;
  
    queryFilter<TEvent extends TypedEvent>(
      event: TypedEventFilter<TEvent>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;
  
    listeners<TEvent extends TypedEvent>(
      eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
      eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
  
    functions: {
      DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;
  
      MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;
  
      __FxBox_init(
        _name: string,
        _symbol: string,
        _baseUri: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      allowTransfer(overrides?: CallOverrides): Promise<[boolean]>;
  
      approve(
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  
      banNft(
        nftId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      baseURI(overrides?: CallOverrides): Promise<[string]>;
  
      blackList(
        arg0: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      checkExistsToken(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      getApproved(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;
  
      grantMinterRole(
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      grantRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      hasRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      isApprovedForAll(
        owner: string,
        operator: string,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      mintNft(
        receiver: string,
        nftId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      name(overrides?: CallOverrides): Promise<[string]>;
  
      onERC721Received(
        arg0: string,
        arg1: string,
        arg2: BigNumberish,
        arg3: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      owner(overrides?: CallOverrides): Promise<[string]>;
  
      ownerOf(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      renounceRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      revokeMinterRole(
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      revokeRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "safeTransferFrom(address,address,uint256)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "safeTransferFrom(address,address,uint256,bytes)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        _data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      setAllowTransfer(
        allow: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      setBaseURI(
        uri: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      symbol(overrides?: CallOverrides): Promise<[string]>;
  
      tokenByIndex(
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      tokenOfOwnerByIndex(
        owner: string,
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[BigNumber]>;
  
      tokenURI(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  
      transferFrom(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      unbanNft(
        nftId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
    };
  
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
  
    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;
  
    __FxBox_init(
      _name: string,
      _symbol: string,
      _baseUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    allowTransfer(overrides?: CallOverrides): Promise<boolean>;
  
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
  
    banNft(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    baseURI(overrides?: CallOverrides): Promise<string>;
  
    blackList(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
  
    checkExistsToken(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  
    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;
  
    grantMinterRole(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    mintNft(
      receiver: string,
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    name(overrides?: CallOverrides): Promise<string>;
  
    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    owner(overrides?: CallOverrides): Promise<string>;
  
    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
  
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    revokeMinterRole(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    setAllowTransfer(
      allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    setBaseURI(
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    symbol(overrides?: CallOverrides): Promise<string>;
  
    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  
    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
  
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    unbanNft(
      nftId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    callStatic: {
      DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;
  
      MINTER_ROLE(overrides?: CallOverrides): Promise<string>;
  
      __FxBox_init(
        _name: string,
        _symbol: string,
        _baseUri: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      allowTransfer(overrides?: CallOverrides): Promise<boolean>;
  
      approve(
        to: string,
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
  
      banNft(nftId: BigNumberish, overrides?: CallOverrides): Promise<void>;
  
      baseURI(overrides?: CallOverrides): Promise<string>;
  
      blackList(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
  
      checkExistsToken(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      getApproved(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<string>;
  
      getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;
  
      grantMinterRole(account: string, overrides?: CallOverrides): Promise<void>;
  
      grantRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      hasRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      isApprovedForAll(
        owner: string,
        operator: string,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      mintNft(
        receiver: string,
        nftId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      name(overrides?: CallOverrides): Promise<string>;
  
      onERC721Received(
        arg0: string,
        arg1: string,
        arg2: BigNumberish,
        arg3: BytesLike,
        overrides?: CallOverrides
      ): Promise<string>;
  
      owner(overrides?: CallOverrides): Promise<string>;
  
      ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
  
      renounceOwnership(overrides?: CallOverrides): Promise<void>;
  
      renounceRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      revokeMinterRole(account: string, overrides?: CallOverrides): Promise<void>;
  
      revokeRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "safeTransferFrom(address,address,uint256)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "safeTransferFrom(address,address,uint256,bytes)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        _data: BytesLike,
        overrides?: CallOverrides
      ): Promise<void>;
  
      setAllowTransfer(allow: boolean, overrides?: CallOverrides): Promise<void>;
  
      setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: CallOverrides
      ): Promise<void>;
  
      setBaseURI(uri: string, overrides?: CallOverrides): Promise<void>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      symbol(overrides?: CallOverrides): Promise<string>;
  
      tokenByIndex(
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      tokenOfOwnerByIndex(
        owner: string,
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
  
      totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  
      transferFrom(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      transferOwnership(
        newOwner: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      unbanNft(nftId: BigNumberish, overrides?: CallOverrides): Promise<void>;
    };
  
    filters: {
      "Approval(address,address,uint256)"(
        owner?: string | null,
        approved?: string | null,
        tokenId?: BigNumberish | null
      ): ApprovalEventFilter;
      Approval(
        owner?: string | null,
        approved?: string | null,
        tokenId?: BigNumberish | null
      ): ApprovalEventFilter;
  
      "ApprovalForAll(address,address,bool)"(
        owner?: string | null,
        operator?: string | null,
        approved?: null
      ): ApprovalForAllEventFilter;
      ApprovalForAll(
        owner?: string | null,
        operator?: string | null,
        approved?: null
      ): ApprovalForAllEventFilter;
  
      "BanNft(uint256)"(id?: BigNumberish | null): BanNftEventFilter;
      BanNft(id?: BigNumberish | null): BanNftEventFilter;
  
      "NFTCreated(string,uint256,address)"(
        baseURI?: null,
        id?: BigNumberish | null,
        minter?: null
      ): NFTCreatedEventFilter;
      NFTCreated(
        baseURI?: null,
        id?: BigNumberish | null,
        minter?: null
      ): NFTCreatedEventFilter;
  
      "OwnershipTransferred(address,address)"(
        previousOwner?: string | null,
        newOwner?: string | null
      ): OwnershipTransferredEventFilter;
      OwnershipTransferred(
        previousOwner?: string | null,
        newOwner?: string | null
      ): OwnershipTransferredEventFilter;
  
      "RoleAdminChanged(bytes32,bytes32,bytes32)"(
        role?: BytesLike | null,
        previousAdminRole?: BytesLike | null,
        newAdminRole?: BytesLike | null
      ): RoleAdminChangedEventFilter;
      RoleAdminChanged(
        role?: BytesLike | null,
        previousAdminRole?: BytesLike | null,
        newAdminRole?: BytesLike | null
      ): RoleAdminChangedEventFilter;
  
      "RoleGranted(bytes32,address,address)"(
        role?: BytesLike | null,
        account?: string | null,
        sender?: string | null
      ): RoleGrantedEventFilter;
      RoleGranted(
        role?: BytesLike | null,
        account?: string | null,
        sender?: string | null
      ): RoleGrantedEventFilter;
  
      "RoleRevoked(bytes32,address,address)"(
        role?: BytesLike | null,
        account?: string | null,
        sender?: string | null
      ): RoleRevokedEventFilter;
      RoleRevoked(
        role?: BytesLike | null,
        account?: string | null,
        sender?: string | null
      ): RoleRevokedEventFilter;
  
      "Transfer(address,address,uint256)"(
        from?: string | null,
        to?: string | null,
        tokenId?: BigNumberish | null
      ): TransferEventFilter;
      Transfer(
        from?: string | null,
        to?: string | null,
        tokenId?: BigNumberish | null
      ): TransferEventFilter;
  
      "UnbanNft(uint256)"(id?: BigNumberish | null): UnbanNftEventFilter;
      UnbanNft(id?: BigNumberish | null): UnbanNftEventFilter;
    };
  
    estimateGas: {
      DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
  
      MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;
  
      __FxBox_init(
        _name: string,
        _symbol: string,
        _baseUri: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      allowTransfer(overrides?: CallOverrides): Promise<BigNumber>;
  
      approve(
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
  
      banNft(
        nftId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      baseURI(overrides?: CallOverrides): Promise<BigNumber>;
  
      blackList(
        arg0: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      checkExistsToken(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      getApproved(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      getRoleAdmin(
        role: BytesLike,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      grantMinterRole(
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      grantRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      hasRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      isApprovedForAll(
        owner: string,
        operator: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      mintNft(
        receiver: string,
        nftId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      name(overrides?: CallOverrides): Promise<BigNumber>;
  
      onERC721Received(
        arg0: string,
        arg1: string,
        arg2: BigNumberish,
        arg3: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      owner(overrides?: CallOverrides): Promise<BigNumber>;
  
      ownerOf(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      renounceRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      revokeMinterRole(
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      revokeRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "safeTransferFrom(address,address,uint256)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "safeTransferFrom(address,address,uint256,bytes)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        _data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      setAllowTransfer(
        allow: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      setBaseURI(
        uri: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      symbol(overrides?: CallOverrides): Promise<BigNumber>;
  
      tokenByIndex(
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      tokenOfOwnerByIndex(
        owner: string,
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      tokenURI(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  
      transferFrom(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      unbanNft(
        nftId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
    };
  
    populateTransaction: {
      DEFAULT_ADMIN_ROLE(
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      __FxBox_init(
        _name: string,
        _symbol: string,
        _baseUri: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      allowTransfer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      approve(
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      balanceOf(
        owner: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      banNft(
        nftId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      blackList(
        arg0: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      checkExistsToken(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      getApproved(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      getRoleAdmin(
        role: BytesLike,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      grantMinterRole(
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      grantRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      hasRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      isApprovedForAll(
        owner: string,
        operator: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      mintNft(
        receiver: string,
        nftId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      onERC721Received(
        arg0: string,
        arg1: string,
        arg2: BigNumberish,
        arg3: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      ownerOf(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      renounceRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      revokeMinterRole(
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      revokeRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "safeTransferFrom(address,address,uint256)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "safeTransferFrom(address,address,uint256,bytes)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        _data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      setAllowTransfer(
        allow: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      setBaseURI(
        uri: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      tokenByIndex(
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      tokenOfOwnerByIndex(
        owner: string,
        index: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      tokenURI(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      transferFrom(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      unbanNft(
        nftId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
    };
  }
  