/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FxBoxBoxInterface extends utils.Interface {
  functions: {
    "VRFContract()": FunctionFragment;
    "__EpicWarBox_init(string,string,string,address,address)": FunctionFragment;
    "addBox(uint16,uint16[],string[],string[])": FunctionFragment;
    "addBoxID(uint16,uint16[])": FunctionFragment;
    "allowTransfer()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "boxByEvent(uint256)": FunctionFragment;
    "boxesByEvent(uint16,uint16)": FunctionFragment;
    "buyBox(uint16,uint16,uint16,address)": FunctionFragment;
    "createEvent(uint16,string,uint16,uint256,address,uint256,uint256,uint16,uint256,address)": FunctionFragment;
    "emergencyWithdrawNFT(uint16,uint256,address)": FunctionFragment;
    "eventByID(uint16)": FunctionFragment;
    "eventStartId()": FunctionFragment;
    "fundWallet()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getBoxID(uint16)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mintBox(uint16,address[],uint16)": FunctionFragment;
    "name()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "openAllBox()": FunctionFragment;
    "openBox(uint256,uint16)": FunctionFragment;
    "openSelectedBox(uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "price()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "randomNumber(uint16)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestRandomNumber(uint16)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setAllowTransfer(bool)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setEventStartId(uint256)": FunctionFragment;
    "setFundWallet(address)": FunctionFragment;
    "setRandomNumber(uint16,uint256)": FunctionFragment;
    "setVRFContract(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBoxEventCount(uint16,uint16)": FunctionFragment;
    "updateEventPriceInfo(uint16,uint256,address)": FunctionFragment;
    "updateEventTimeInfo(uint16,uint256,uint256)": FunctionFragment;
    "updateEventTotalSupplyInfo(uint16,uint16,uint256,uint16)": FunctionFragment;
    "updateOpenBoxInfo(uint16,uint256,address)": FunctionFragment;
    "uri()": FunctionFragment;
    "userBought(uint16,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "VRFContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__EpicWarBox_init",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addBox",
    values: [BigNumberish, BigNumberish[], string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addBoxID",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "boxByEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "boxesByEvent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBox",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawNFT",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "eventByID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eventStartId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoxID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBox",
    values: [BigNumberish, string[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "openAllBox",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openBox",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openSelectedBox",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "randomNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowTransfer",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setEventStartId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRandomNumber",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVRFContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBoxEventCount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEventPriceInfo",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEventTimeInfo",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEventTotalSupplyInfo",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOpenBoxInfo",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userBought",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "VRFContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__EpicWarBox_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addBoxID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boxByEvent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boxesByEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyBox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventByID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventStartId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBoxID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openAllBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openBox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openSelectedBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEventStartId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVRFContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBoxEventCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEventPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEventTimeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEventTotalSupplyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOpenBoxInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userBought", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "BoxCreated(uint256,address,uint16,string,string,string,address,uint256,address)": EventFragment;
    "BoxOpened(address,uint256,uint256,uint16)": EventFragment;
    "EventCreated(uint16,uint256,address,uint256,uint256,uint16,uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoxCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoxOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type BoxCreatedEvent = TypedEvent<
  [
    BigNumber,
    string,
    number,
    string,
    string,
    string,
    string,
    BigNumber,
    string
  ],
  {
    id: BigNumber;
    boxOwner: string;
    eventId: number;
    eventType: string;
    boxUri: string;
    boxName: string;
    boxContractAddress: string;
    price: BigNumber;
    currency: string;
  }
>;

export type BoxCreatedEventFilter = TypedEventFilter<BoxCreatedEvent>;

export type BoxOpenedEvent = TypedEvent<
  [string, BigNumber, BigNumber, number],
  { user: string; boxId: BigNumber; nftId: BigNumber; eventId: number }
>;

export type BoxOpenedEventFilter = TypedEventFilter<BoxOpenedEvent>;

export type EventCreatedEvent = TypedEvent<
  [
    number,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    string
  ],
  {
    totalSupply: number;
    price: BigNumber;
    currency: string;
    startTime: BigNumber;
    endTime: BigNumber;
    maxBuy: number;
    startID: BigNumber;
    openBoxTime: BigNumber;
    nftContract: string;
  }
>;

export type EventCreatedEventFilter = TypedEventFilter<EventCreatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface FxBoxBox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FxBoxBoxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VRFContract(overrides?: CallOverrides): Promise<[string]>;

    __EpicWarBox_init(
      name: string,
      symbol: string,
      _uri: string,
      _fundWallet: string,
      _VRFContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addBox(
      _eventID: BigNumberish,
      _quantity: BigNumberish[],
      _boxName: string[],
      _boxImageUri: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addBoxID(
      _eventID: BigNumberish,
      _boxIDList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowTransfer(overrides?: CallOverrides): Promise<[boolean]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    boxByEvent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    boxesByEvent(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, string] & {
        quantity: number;
        bought: number;
        nameBox: string;
        uriImage: string;
      }
    >;

    buyBox(
      _eventID: BigNumberish,
      _amount: BigNumberish,
      _indexBoxList: BigNumberish,
      _token: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createEvent(
      _eventID: BigNumberish,
      _eventType: string,
      _totalSupply: BigNumberish,
      _price: BigNumberish,
      _currency: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _maxBuy: BigNumberish,
      _openBoxTime: BigNumberish,
      _nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawNFT(
      _eventID: BigNumberish,
      _id: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    eventByID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string,
        string,
        number
      ] & {
        totalSupply: number;
        boxPrice: BigNumber;
        currency: string;
        startTime: BigNumber;
        endTime: BigNumber;
        maxBuy: number;
        startID: BigNumber;
        openBoxTime: BigNumber;
        nftContract: string;
        eventType: string;
        boxCount: number;
      }
    >;

    eventStartId(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundWallet(overrides?: CallOverrides): Promise<[string]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBoxID(
      _eventID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintBox(
      _eventID: BigNumberish,
      _adds: string[],
      _indexBoxList: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openAllBox(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openBox(
      _boxId: BigNumberish,
      _eventID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openSelectedBox(
      nftIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    price(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    randomNumber(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestRandomNumber(
      _eventID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowTransfer(
      allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEventStartId(
      _startId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFundWallet(
      _fund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRandomNumber(
      _eventID: BigNumberish,
      _randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVRFContract(
      _VRFContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBoxEventCount(
      _eventID: BigNumberish,
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateEventPriceInfo(
      _eventID: BigNumberish,
      _price: BigNumberish,
      _currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateEventTimeInfo(
      _eventID: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateEventTotalSupplyInfo(
      _eventID: BigNumberish,
      _totalSupply: BigNumberish,
      _startID: BigNumberish,
      _maxBuy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateOpenBoxInfo(
      _eventID: BigNumberish,
      _openBoxTime: BigNumberish,
      _nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(overrides?: CallOverrides): Promise<[string]>;

    userBought(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  VRFContract(overrides?: CallOverrides): Promise<string>;

  __EpicWarBox_init(
    name: string,
    symbol: string,
    _uri: string,
    _fundWallet: string,
    _VRFContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addBox(
    _eventID: BigNumberish,
    _quantity: BigNumberish[],
    _boxName: string[],
    _boxImageUri: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addBoxID(
    _eventID: BigNumberish,
    _boxIDList: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowTransfer(overrides?: CallOverrides): Promise<boolean>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  boxByEvent(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  boxesByEvent(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, string, string] & {
      quantity: number;
      bought: number;
      nameBox: string;
      uriImage: string;
    }
  >;

  buyBox(
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createEvent(
    _eventID: BigNumberish,
    _eventType: string,
    _totalSupply: BigNumberish,
    _price: BigNumberish,
    _currency: string,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _maxBuy: BigNumberish,
    _openBoxTime: BigNumberish,
    _nftContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawNFT(
    _eventID: BigNumberish,
    _id: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  eventByID(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      string,
      string,
      number
    ] & {
      totalSupply: number;
      boxPrice: BigNumber;
      currency: string;
      startTime: BigNumber;
      endTime: BigNumber;
      maxBuy: number;
      startID: BigNumber;
      openBoxTime: BigNumber;
      nftContract: string;
      eventType: string;
      boxCount: number;
    }
  >;

  eventStartId(overrides?: CallOverrides): Promise<BigNumber>;

  fundWallet(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBoxID(
    _eventID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number[]>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintBox(
    _eventID: BigNumberish,
    _adds: string[],
    _indexBoxList: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openAllBox(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openBox(
    _boxId: BigNumberish,
    _eventID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openSelectedBox(
    nftIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  price(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  randomNumber(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestRandomNumber(
    _eventID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowTransfer(
    allow: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEventStartId(
    _startId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFundWallet(
    _fund: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRandomNumber(
    _eventID: BigNumberish,
    _randomness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVRFContract(
    _VRFContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBoxEventCount(
    _eventID: BigNumberish,
    _count: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateEventPriceInfo(
    _eventID: BigNumberish,
    _price: BigNumberish,
    _currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateEventTimeInfo(
    _eventID: BigNumberish,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateEventTotalSupplyInfo(
    _eventID: BigNumberish,
    _totalSupply: BigNumberish,
    _startID: BigNumberish,
    _maxBuy: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateOpenBoxInfo(
    _eventID: BigNumberish,
    _openBoxTime: BigNumberish,
    _nftContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(overrides?: CallOverrides): Promise<string>;

  userBought(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    VRFContract(overrides?: CallOverrides): Promise<string>;

    __EpicWarBox_init(
      name: string,
      symbol: string,
      _uri: string,
      _fundWallet: string,
      _VRFContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addBox(
      _eventID: BigNumberish,
      _quantity: BigNumberish[],
      _boxName: string[],
      _boxImageUri: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addBoxID(
      _eventID: BigNumberish,
      _boxIDList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowTransfer(overrides?: CallOverrides): Promise<boolean>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    boxByEvent(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    boxesByEvent(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, string] & {
        quantity: number;
        bought: number;
        nameBox: string;
        uriImage: string;
      }
    >;

    buyBox(
      _eventID: BigNumberish,
      _amount: BigNumberish,
      _indexBoxList: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createEvent(
      _eventID: BigNumberish,
      _eventType: string,
      _totalSupply: BigNumberish,
      _price: BigNumberish,
      _currency: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _maxBuy: BigNumberish,
      _openBoxTime: BigNumberish,
      _nftContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawNFT(
      _eventID: BigNumberish,
      _id: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    eventByID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        string,
        string,
        number
      ] & {
        totalSupply: number;
        boxPrice: BigNumber;
        currency: string;
        startTime: BigNumber;
        endTime: BigNumber;
        maxBuy: number;
        startID: BigNumber;
        openBoxTime: BigNumber;
        nftContract: string;
        eventType: string;
        boxCount: number;
      }
    >;

    eventStartId(overrides?: CallOverrides): Promise<BigNumber>;

    fundWallet(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBoxID(
      _eventID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number[]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintBox(
      _eventID: BigNumberish,
      _adds: string[],
      _indexBoxList: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    openAllBox(overrides?: CallOverrides): Promise<void>;

    openBox(
      _boxId: BigNumberish,
      _eventID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openSelectedBox(
      nftIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    price(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    randomNumber(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestRandomNumber(
      _eventID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowTransfer(allow: boolean, overrides?: CallOverrides): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(_uri: string, overrides?: CallOverrides): Promise<void>;

    setEventStartId(
      _startId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundWallet(_fund: string, overrides?: CallOverrides): Promise<void>;

    setRandomNumber(
      _eventID: BigNumberish,
      _randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVRFContract(
      _VRFContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBoxEventCount(
      _eventID: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEventPriceInfo(
      _eventID: BigNumberish,
      _price: BigNumberish,
      _currency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEventTimeInfo(
      _eventID: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEventTotalSupplyInfo(
      _eventID: BigNumberish,
      _totalSupply: BigNumberish,
      _startID: BigNumberish,
      _maxBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOpenBoxInfo(
      _eventID: BigNumberish,
      _openBoxTime: BigNumberish,
      _nftContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(overrides?: CallOverrides): Promise<string>;

    userBought(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "BoxCreated(uint256,address,uint16,string,string,string,address,uint256,address)"(
      id?: BigNumberish | null,
      boxOwner?: null,
      eventId?: null,
      eventType?: null,
      boxUri?: null,
      boxName?: null,
      boxContractAddress?: null,
      price?: null,
      currency?: null
    ): BoxCreatedEventFilter;
    BoxCreated(
      id?: BigNumberish | null,
      boxOwner?: null,
      eventId?: null,
      eventType?: null,
      boxUri?: null,
      boxName?: null,
      boxContractAddress?: null,
      price?: null,
      currency?: null
    ): BoxCreatedEventFilter;

    "BoxOpened(address,uint256,uint256,uint16)"(
      user?: string | null,
      boxId?: null,
      nftId?: null,
      eventId?: null
    ): BoxOpenedEventFilter;
    BoxOpened(
      user?: string | null,
      boxId?: null,
      nftId?: null,
      eventId?: null
    ): BoxOpenedEventFilter;

    "EventCreated(uint16,uint256,address,uint256,uint256,uint16,uint256,uint256,address)"(
      totalSupply?: null,
      price?: null,
      currency?: null,
      startTime?: null,
      endTime?: null,
      maxBuy?: null,
      startID?: null,
      openBoxTime?: null,
      nftContract?: null
    ): EventCreatedEventFilter;
    EventCreated(
      totalSupply?: null,
      price?: null,
      currency?: null,
      startTime?: null,
      endTime?: null,
      maxBuy?: null,
      startID?: null,
      openBoxTime?: null,
      nftContract?: null
    ): EventCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    VRFContract(overrides?: CallOverrides): Promise<BigNumber>;

    __EpicWarBox_init(
      name: string,
      symbol: string,
      _uri: string,
      _fundWallet: string,
      _VRFContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addBox(
      _eventID: BigNumberish,
      _quantity: BigNumberish[],
      _boxName: string[],
      _boxImageUri: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addBoxID(
      _eventID: BigNumberish,
      _boxIDList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    boxByEvent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boxesByEvent(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyBox(
      _eventID: BigNumberish,
      _amount: BigNumberish,
      _indexBoxList: BigNumberish,
      _token: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createEvent(
      _eventID: BigNumberish,
      _eventType: string,
      _totalSupply: BigNumberish,
      _price: BigNumberish,
      _currency: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _maxBuy: BigNumberish,
      _openBoxTime: BigNumberish,
      _nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawNFT(
      _eventID: BigNumberish,
      _id: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    eventByID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eventStartId(overrides?: CallOverrides): Promise<BigNumber>;

    fundWallet(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBoxID(
      _eventID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintBox(
      _eventID: BigNumberish,
      _adds: string[],
      _indexBoxList: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openAllBox(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openBox(
      _boxId: BigNumberish,
      _eventID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openSelectedBox(
      nftIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    randomNumber(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestRandomNumber(
      _eventID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowTransfer(
      allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEventStartId(
      _startId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFundWallet(
      _fund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRandomNumber(
      _eventID: BigNumberish,
      _randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVRFContract(
      _VRFContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBoxEventCount(
      _eventID: BigNumberish,
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateEventPriceInfo(
      _eventID: BigNumberish,
      _price: BigNumberish,
      _currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateEventTimeInfo(
      _eventID: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateEventTotalSupplyInfo(
      _eventID: BigNumberish,
      _totalSupply: BigNumberish,
      _startID: BigNumberish,
      _maxBuy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateOpenBoxInfo(
      _eventID: BigNumberish,
      _openBoxTime: BigNumberish,
      _nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(overrides?: CallOverrides): Promise<BigNumber>;

    userBought(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VRFContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __EpicWarBox_init(
      name: string,
      symbol: string,
      _uri: string,
      _fundWallet: string,
      _VRFContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addBox(
      _eventID: BigNumberish,
      _quantity: BigNumberish[],
      _boxName: string[],
      _boxImageUri: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addBoxID(
      _eventID: BigNumberish,
      _boxIDList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowTransfer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boxByEvent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boxesByEvent(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyBox(
      _eventID: BigNumberish,
      _amount: BigNumberish,
      _indexBoxList: BigNumberish,
      _token: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createEvent(
      _eventID: BigNumberish,
      _eventType: string,
      _totalSupply: BigNumberish,
      _price: BigNumberish,
      _currency: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _maxBuy: BigNumberish,
      _openBoxTime: BigNumberish,
      _nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawNFT(
      _eventID: BigNumberish,
      _id: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    eventByID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eventStartId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBoxID(
      _eventID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintBox(
      _eventID: BigNumberish,
      _adds: string[],
      _indexBoxList: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openAllBox(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openBox(
      _boxId: BigNumberish,
      _eventID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openSelectedBox(
      nftIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    randomNumber(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestRandomNumber(
      _eventID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowTransfer(
      allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEventStartId(
      _startId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFundWallet(
      _fund: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRandomNumber(
      _eventID: BigNumberish,
      _randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVRFContract(
      _VRFContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBoxEventCount(
      _eventID: BigNumberish,
      _count: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateEventPriceInfo(
      _eventID: BigNumberish,
      _price: BigNumberish,
      _currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateEventTimeInfo(
      _eventID: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateEventTotalSupplyInfo(
      _eventID: BigNumberish,
      _totalSupply: BigNumberish,
      _startID: BigNumberish,
      _maxBuy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateOpenBoxInfo(
      _eventID: BigNumberish,
      _openBoxTime: BigNumberish,
      _nftContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userBought(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
